name: AWS Inspector SBOM & Security Scan

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'course-site-with-nodejs-backend/server-nodejs/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'course-site-with-nodejs-backend/server-nodejs/**'
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: int/server-nodejs
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server-nodejs

jobs:
  aws-inspector-scan:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::950555670656:role/github-oidc
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push to ECR
      id: build-ecr
      uses: docker/build-push-action@v5
      with:
        context: ./course-site-with-nodejs-backend/server-nodejs
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Wait for image to be available
      run: |
        echo "⏳ Waiting for image to be available in ECR..."
        sleep 30
        
    - name: Run AWS Inspector scan
      id: inspector-scan
      run: |
        echo "🔍 Starting AWS Inspector container scan..."
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
        
        # Start Inspector scan
        SCAN_ID=$(aws inspector2 batch-get-free-trial-info --account-ids ${{ secrets.AWS_ACCOUNT_ID }} --query 'accounts[0].accountId' --output text 2>/dev/null || echo "")
        
        # Use Inspector V2 API to scan the image
        aws inspector2 batch-get-finding-details \
          --finding-arns $(aws inspector2 list-findings \
            --filter-criteria '{"ecrImageTags":[{"comparison":"EQUALS","value":"latest"}]}' \
            --query 'findings[].findingArn' --output text) \
          --output json > inspector-findings.json || echo "[]" > inspector-findings.json
          
        echo "✅ AWS Inspector scan completed"
        
    - name: Generate SBOM with AWS Inspector
      run: |
        echo "📋 Generating SBOM with AWS Inspector..."
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
        
        # Get image details and create SBOM
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageTag=latest \
          --output json > ecr-image-details.json
          
        # Create SPDX SBOM format
        cat > aws-inspector-sbom.json << 'EOF'
        {
          "spdxVersion": "SPDX-2.3",
          "dataLicense": "CC0-1.0",
          "SPDXID": "SPDXRef-DOCUMENT",
          "name": "AWS Inspector SBOM for server-nodejs",
          "documentNamespace": "https://github.com/${{ github.repository }}/aws-inspector-sbom/${{ github.sha }}",
          "creationInfo": {
            "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "creators": ["Tool: AWS Inspector", "Tool: GitHub Actions"]
          },
          "packages": []
        }
        EOF
        
        # Extract package information from ECR
        aws ecr get-repository-policy --repository-name ${{ env.ECR_REPOSITORY }} --output json > repository-policy.json 2>/dev/null || echo "{}" > repository-policy.json
        
        echo "✅ AWS Inspector SBOM generated"
        
    - name: Enhanced SBOM generation with Inspector data
      run: |
        echo "📋 Creating comprehensive SBOM with Inspector findings..."
        
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Create enhanced SBOM with vulnerability data
        cat > enhanced-aws-sbom.json << EOF
        {
          "bomFormat": "CycloneDX",
          "specVersion": "1.4",
          "serialNumber": "urn:uuid:$(uuidgen)",
          "version": 1,
          "metadata": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "tools": [
              {
                "vendor": "AWS",
                "name": "Inspector",
                "version": "2.0"
              }
            ],
            "component": {
              "type": "container",
              "name": "server-nodejs",
              "version": "${{ github.sha }}",
              "purl": "pkg:docker/${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${{ github.sha }}"
            }
          },
          "components": [],
          "vulnerabilities": []
        }
        EOF
        
        # Process Inspector findings if available
        if [ -f inspector-findings.json ] && [ -s inspector-findings.json ]; then
          echo "Processing Inspector findings..."
          # Check if the JSON is an array or has a findings property
          if jq -e 'type == "array"' inspector-findings.json > /dev/null 2>&1; then
            cp inspector-findings.json processed-findings.json
          else
            jq '.findings // []' inspector-findings.json > processed-findings.json
          fi
        else
          echo "[]" > processed-findings.json
        fi
        
        echo "✅ Enhanced SBOM with Inspector data created"
        
    - name: Upload SBOM to S3
      run: |
        echo "☁️ Uploading SBOM to S3..."
        BUCKET_NAME="${{ secrets.AWS_S3_SBOM_BUCKET }}"
        
        if [ ! -z "$BUCKET_NAME" ]; then
          # Upload all SBOM files to S3
          aws s3 cp aws-inspector-sbom.json "s3://$BUCKET_NAME/sbom/${{ github.repository }}/${{ github.sha }}/aws-inspector-sbom.json"
          aws s3 cp enhanced-aws-sbom.json "s3://$BUCKET_NAME/sbom/${{ github.repository }}/${{ github.sha }}/enhanced-aws-sbom.json"
          aws s3 cp inspector-findings.json "s3://$BUCKET_NAME/findings/${{ github.repository }}/${{ github.sha }}/inspector-findings.json"
          
          echo "✅ SBOM files uploaded to S3"
        else
          echo "ℹ️ S3 bucket not configured, skipping upload"
        fi
        
    - name: Attest AWS Inspector SBOM
      uses: actions/attest-sbom@v1
      with:
        subject-path: ./enhanced-aws-sbom.json
        sbom-path: ./enhanced-aws-sbom.json
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aws-inspector-sbom-${{ github.sha }}
        path: |
          ./aws-inspector-sbom.json
          ./enhanced-aws-sbom.json
          ./inspector-findings.json
          ./ecr-image-details.json
          ./processed-findings.json
        retention-days: 90
        
    - name: Generate security report
      run: |
        echo "📊 Generating security report..."
        
        cat > security-report.md << 'EOF'
        # AWS Inspector Security Report
        
        **Repository:** ${{ github.repository }}
        **Commit:** ${{ github.sha }}
        **Scan Date:** $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)
        **Image:** ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        
        ## Scan Summary
        
        - ✅ AWS Inspector scan completed
        - 📋 SBOM generated in multiple formats
        - 🔍 Vulnerability assessment performed
        - ☁️ Results uploaded to AWS S3
        - 🔐 SBOM attestation created
        
        ## Files Generated
        
        1. `aws-inspector-sbom.json` - Basic SPDX format SBOM
        2. `enhanced-aws-sbom.json` - CycloneDX format with vulnerabilities
        3. `inspector-findings.json` - Raw Inspector findings
        4. `ecr-image-details.json` - ECR image metadata
        
        ## Next Steps
        
        - Review findings in AWS Inspector console
        - Check S3 bucket for uploaded SBOM files
        - Verify attestations in GitHub
        
        EOF
        
        echo "✅ Security report generated"
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  cleanup-old-images:
    needs: [aws-inspector-scan]
    runs-on: ubuntu-latest
    if: always()
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::950555670656:role/github-oidc
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cleanup old ECR images
      run: |
        echo "🧹 Cleaning up old ECR images..."
        
        # Keep only the last 10 images
        aws ecr list-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[?imageDigest!=null]' \
          --output json | \
        jq '.[:10]' | \
        aws ecr batch-delete-image \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids file:///dev/stdin || echo "No images to cleanup"
          
        echo "✅ ECR cleanup completed"
